# Copyright (C) 2024 Dell Inc. or its subsidiaries. All Rights Reserved.

# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
---
- name: Converge
  hosts: all
  gather_facts: false
  vars:
    hostname: "{{ lookup('env', 'IDRAC_IP') }}"
    username: "{{ lookup('env', 'IDRAC_USER') }}"
    password: "{{ lookup('env', 'IDRAC_PASSWORD') }}"
    controller_id: "{{ lookup('env', 'CONTROLLER_ID') }}"
  tasks:
    - include_tasks: ../__helper.yml

    - name: Pre-check - fail if enough disk not found to create VD on RAID 1
      fail:
        msg: 'Physical disks are not sufficient to proceed the test case need more than 2 and found {{ physicaldisks | length}}'
      when: "{{ physicaldisks | length}} < 2"

    # removing if disks are assigned as hotspare and resetting the controller
    - include_tasks: ../__helper.yml
      vars:
        reset_trigger: 1
        target: "{{ physicaldisks[0] }}"

    # removing if disks are assigned as hotspare
    - include_tasks: ../__helper.yml
      vars:
        target: "{{ physicaldisks[1] }}"

    - name: Block for disk status change to online
      block:
      # Creating the VD on raid1 and making offline the target disk as prereq
        - include_tasks: ../__helper.yml
          vars:
            volume_type: "RAID 1"
            span_length: 2
            id: ["{{ physicaldisks[0] }}", "{{ physicaldisks[1] }}"]
            vd_trigger: 1
            command: "ChangePDStateToOffline"
            target_disk: "{{ physicaldisks[0] }}"
            change_disk_state: 1

        - name: Create a list of dictionaries of dictionaries
          set_fact:
            my_list:
              - id: physicaldisks[0]
                status: online
        
        - name: Validate the disk status change to online
          ansible.builtin.import_role:
            name: idrac_storage_controller
          vars:
            hostname: "{{ lookup('env', 'IDRAC_IP') }}"
            username: "{{ lookup('env', 'IDRAC_USER') }}"
            password: "{{ lookup('env', 'IDRAC_PASSWORD') }}"
            validate_certs: false
            job_wait: true
            job_wait_timeout: 1200
            controller_id: "{{ controller_id }}"
            disks: my_list

        - name: Verifying disk status change to online in check mode
          ansible.builtin.assert:
            that:
              - pd_state_out.msg == "Changes found to be applied."
              - pd_state_out.changed
          when: ansible_check_mode

        - name: Verifying disk status change to online in normal mode
          ansible.builtin.assert:
            that:
              - pd_state_out.msg == "Successfully performed the 'ChangePDStateToOnline' operation."
              - pd_state_out.changed
          when: not ansible_check_mode and pd_state_out.changed

        - name: Verifying disk status change to online in idempotence mode
          ansible.builtin.assert:
            that:
              - pd_state_out.msg == "No changes found to be applied."
              - not pd_state_out.changed
          when: not ansible_check_mode and not pd_state_out.changed



    - name: Block for disk status change to offline
      block:
      # making online the target disk as prereq
        - include_tasks: ../__helper.yml
          vars:
            command: "ChangePDStateToOnline"
            target_disk: "{{ physicaldisks[0] }}"
            change_disk_state: 1
            run_trigger: 1

        - name: Create a list of dictionaries of dictionaries
          set_fact:
            my_list:
              - id: physicaldisks[0]
                status: offline
        
        - name: Validate the disk status change to online
          ansible.builtin.import_role:
            name: idrac_storage_controller
          vars:
            hostname: "{{ lookup('env', 'IDRAC_IP') }}"
            username: "{{ lookup('env', 'IDRAC_USER') }}"
            password: "{{ lookup('env', 'IDRAC_PASSWORD') }}"
            validate_certs: false
            job_wait: true
            job_wait_timeout: 1200
            controller_id: "{{ controller_id }}"
            disks: my_list

        - include_role: name=prepare_lifecycle_controller_job
          vars:
            job_id: "{{result_offline.status.Id}}"
          when: result_offline.msg == "Successfully submitted the job that performs the 'ChangePDStateToOffline' operation."
          ignore_errors: true

        - name: Verifying disk status change to online in check mode
          ansible.builtin.assert:
            that:
              - pd_state_out.msg == "Changes found to be applied."
              - pd_state_out.changed
          when: ansible_check_mode

        - name: Verifying disk status change to online in normal mode
          ansible.builtin.assert:
            that:
              - pd_state_out.msg == "Successfully submitted the job that performs the 'ChangePDStateToOffline' operation."
              - pd_state_out.changed
          when: not ansible_check_mode and pd_state_out.changed

        - name: Verifying disk status change to online in idempotence mode
          ansible.builtin.assert:
            that:
              - pd_state_out.msg == "No changes found to be applied."
              - not pd_state_out.changed
          when: not ansible_check_mode and not pd_state_out.changed
