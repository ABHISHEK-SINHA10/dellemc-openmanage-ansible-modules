---
- name: Converge
  hosts: all
  gather_facts: false
  tasks:
    - name: Pre-req - Fetch volumes
      ansible.builtin.include_tasks: ../__fetch_volumes.yml
      vars:
        post_op: false
    
  #   - name: Performing operation on the iDRAC device using default reset_type with invalid hostname
  #     ansible.builtin.import_role:
  #       name: idrac_storage_controller
  #     vars:
  #       hostname: "randomHostname"
  #       username: "{{ lookup('env', 'IDRAC_USER') }}"
  #       password: "{{ lookup('env', 'IDRAC_PASSWORD') }}"
  #       validate_certs: false
  #       controller_id: "{{ controller_name }}"
  #       reset_config: true
  #     ignore_errors: true
  #     ignore_unreachable: true
    
  #   - name: "Verifying operation on the iDRAC device using default reset_type with invalid hostname"
  #     ansible.builtin.assert:
  #       that:
  #         - "'<urlopen error Unable to communicate with iDRAC randomHostname.' in '{{ reset_config_out.msg }}' or
  #           '<urlopen error [Errno -2] Name or service not known>' in '{{ reset_config_out.msg }}'"
     
  #   - name: Performing operation on the iDRAC device using default reset_type with invalid username
  #     ansible.builtin.import_role:
  #       name: idrac_storage_controller
  #     vars:
  #       hostname: "{{ lookup('env', 'IDRAC_IP') }}"
  #       username: "WrongUsername123"
  #       password: "{{ lookup('env', 'IDRAC_PASSWORD') }}"
  #       validate_certs: false
  #       reset_config: true
  #       controller_id: "{{ controller_name }}"
  #     ignore_errors: true
  #     ignore_unreachable: true
   
  #   - name: "Verifying operation on the iDRAC device using default reset_type with invalid username"
  #     ansible.builtin.assert:
  #       that:
  #         - "'HTTP Error 401' in '{{ reset_config_out.msg }}'"
  #  '
  #  ' - name: Performing operation on the iDRAC device using default reset_type with invalid password
  #     ansible.builtin.import_role:
  #       name: idrac_storage_controller
  #     vars:
  #       hostname: "{{ lookup('env', 'IDRAC_IP') }}"
  #       username: "{{ lookup('env', 'IDRAC_USER') }}"
  #       password: "WrongPassword@123"
  #       validate_certs: false
  #       controller_id: "{{ controller_name }}"
  #       reset_config: true
  #     ignore_errors: true
  #     ignore_unreachable: true
    
  #   - name: "Verifying operation on the iDRAC device using default reset_type with invalid password"
  #     ansible.builtin.assert:
  #       that:
  #         - "'HTTP Error 401' in '{{ reset_config_out.msg }}'"
    
  #   - name: Performing operation on the iDRAC device using default reset_type without controller ID
  #     ansible.builtin.import_role:
  #       name: idrac_storage_controller
  #     vars:
  #       hostname: "{{ lookup('env', 'IDRAC_IP') }}"
  #       username: "{{ lookup('env', 'IDRAC_USER') }}"
  #       password: "{{ lookup('env', 'IDRAC_PASSWORD') }}"
  #       validate_certs: false
  #       controller_id: None
  #       reset_config: true
  #     ignore_errors: true
  #     ignore_unreachable: true
    
  #   - name: "Verifying operation on the iDRAC device using default reset_type without controller ID"
  #     ansible.builtin.assert:
  #       that:
  #         - reset_config_out.msg == "controller_id with id 'None' not found in system"
 
  #   - name: Playbook to set controller attributes with Job wait when "apply_time=AtMaintenanceWindowStart"  by providing a invalid value
  #     ansible.builtin.import_role:
  #       name: idrac_storage_controller
  #     vars:
  #       hostname: "{{ lookup('env', 'IDRAC_IP') }}"
  #       username: "{{ lookup('env', 'IDRAC_USER') }}"
  #       password: "{{ lookup('env', 'IDRAC_PASSWORD') }}"
  #       validate_certs: false
  #       controller_id: "{{ controller_name }}"
  #       attributes:
  #         CopybackMode: "On"
  #         EnhancedAutoImportForeignConfigurationMode: "invalid value"
  #         PatrolReadMode: Disabled
  #       apply_time: AtMaintenanceWindowStart
  #       maintenance_window:
  #         start_time: "2026-09-14T06:59:35-05:00"
  #         duration: "180"
  #     ignore_errors: true
   
  #   - name: Verifying disk status change to online in Normal mode
  #     ansible.builtin.assert:
  #       that:
  #         - attributes_config_out.msg == "Unable to configure the controller attribute(s) settings."
  #         - attributes_config_out.failed
  #   - name: Playbook to set controller attributes with Job wait when "apply_time=AtMaintenanceWindowStart"  by providing a invalid attribute
  #     ansible.builtin.import_role:
  #       name: idrac_storage_controller
  #     vars:
  #       hostname: "{{ lookup('env', 'IDRAC_IP') }}"
  #       username: "{{ lookup('env', 'IDRAC_USER') }}"
  #       password: "{{ lookup('env', 'IDRAC_PASSWORD') }}"
  #       validate_certs: false
  #       controller_id: "{{ controller_name }}"
  #       attributes:
  #         CopybackMode: "On"
  #         PatrolReadMode: Disabled
  #         InvalidAttribute: "Off"
  #       apply_time: AtMaintenanceWindowStart
  #       maintenance_window:
  #         start_time: "2026-09-14T06:59:35-05:00"
  #         duration: "180"
  #     ignore_errors: true
  
  #   - name: Verifying disk status change to online in Normal mode
  #     ansible.builtin.assert:
  #       that:
        
  #         - "attributes_config_out.msg == 'The following attributes are invalid: [\\'InvalidAttribute\\']'"
  #         - attributes_config_out.failed
    
    - name: Create a list of dictionaries of dictionaries
      ansible.builtin.set_fact:
        vol_details:
          id: "Invalid"
          expand_capacity_disk: 362785
    
    - name: Playbook to expand size of disk by target with Job wait with "volume_id " as Invalid value
      ansible.builtin.import_role:
        name: idrac_storage_controller
      vars:
        hostname: "{{ lookup('env', 'IDRAC_IP') }}"
        username: "{{ lookup('env', 'IDRAC_USER') }}"
        password: "{{ lookup('env', 'IDRAC_PASSWORD') }}"
        validate_certs: false
        command: OnlineCapacityExpansion
        controller_id: "{{ controller_name }}"
        volumes: "{{ vol_details }}"
        Job_wait: true
    
    - name: Verifying disk status change to online in Normal mode
      ansible.builtin.assert:
        that:
          - "oce_vd_out.msg == 'Unable to locate the virtual disk with the ID: Invalid'"
          - oce_vd_out.failed

    - name: Create a list of dictionaries of dictionaries
      ansible.builtin.set_fact:
        vol_details:
          id: "{{ virtualdisk }}"
          dedicated_hot_spare: "{{ physicaldisks[3] }}"

    - name: Playbook to expand size of disk by target with Job wait with "drive_id " as Invalid value
      ansible.builtin.import_role:
        name: idrac_storage_controller
      vars:
        hostname: "{{ lookup('env', 'IDRAC_IP') }}"
        username: "{{ lookup('env', 'IDRAC_USER') }}"
        password: "{{ lookup('env', 'IDRAC_PASSWORD') }}"
        validate_certs: false
        command: OnlineCapacityExpansion
          volume_id: {{volume_id}}
        drive_id: 
          - "{{invalid drive_id_ofPhysical_disk}}"
        Job_wait: true
   
    # # - name: Playbook to expand size of disk by size with Job wait with "volume_id " as Invalid value
    # #   ansible.builtin.import_role:
    # #     name: idrac_storage_controller
    # #   vars:
    # #     hostname: "{{ lookup('env', 'IDRAC_IP') }}"
    # #     username: "{{ lookup('env', 'IDRAC_USER') }}"
    # #     password: "{{ lookup('env', 'IDRAC_PASSWORD') }}"
    # #     validate_certs: false
    # #     command: OnlineCapacityExpansion
    # #     volume_id: {{ invalid value}}
    # #     size: {{size in MB}}


